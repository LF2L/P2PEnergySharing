from pymoo.algorithms.so_genetic_algorithm import GA
from pymoo.factory import get_problem
from pymoo.optimize import minimize

xl = np.array([ -5729.68723637,  -7186.42064151,  -8376.53877832,   9885.2449325 ,
        -8103.72071669,  -9010.44636311,   9885.2449325 ,  -8958.37628065,
        -8784.09001329,   8918.82180835,   9743.49056294,  -9573.8245203 ,
         8907.93028718,   8897.03876602,   9743.49056294,  -8754.5934217 ,
        -7928.59363201,   9885.2449325 ,   9885.2449325 ,   9885.2449325 ,
         8907.93028718,  -9230.23371017,   9885.2449325 ,   9885.2449325 ,
        -2799.6893218 ,  11561.1269987 ,  14369.09181897, -11681.68846441,
        11905.22335013,  10884.34262014,  -6596.33032369,   8907.93028718,
         9743.49056294,   9885.2449325 ,   9885.2449325 ,  10733.81894745,
        -4422.29418697,  -3966.95090007,   9896.13645366,   9885.2449325 ,
        10733.81894745,  -6803.88008623,  12551.45538321,  15359.42020348,
        -6364.99734508,  11861.65726546, -10029.06087682,  -2791.65284532,
         -893.16656606,  -8976.17379589,  -9563.93482501,  12905.50422066,
        13149.8803556 ,  -4459.66349104,  -9589.54018913, -13907.24121635,
        17294.67675088,  17857.94400153,  18344.20861642,  15988.26321122,
        14534.37723446,  14098.00513576, -13837.01184547,   -124.11356845,
        14395.21501752,  -9246.41016723,  13693.32025303,  14120.64234404,
        15719.50092858, -16399.69088212,  17149.02447075,  17204.92358303,
        15015.83259974,  -6551.28949036,  -2723.30481168,  -9067.78802085,
        -4417.32410843,  15481.18509768,  14423.18116935,  12328.17597638,
        -4193.81142917,  11057.6965825 ,  -5092.18456413,  -6928.93862888,
        -6435.22586185,  -7050.57933177,  12568.41985002,  13550.08511388,
        -5422.24105288,  13301.99197547,  10274.63187141,  14880.81160588,
        16119.01864843,  14615.38590161,   -753.2323802 ,  11916.11690734,
        10641.24061085,  11956.2457948 ,   9998.54387389,  -6156.14024338,
        -8785.38749904,  10873.45109898,  10873.45109898,   9896.13645366,
        -2257.77427646,  11561.1269987 ,  10884.34262014,  -3136.6416783 ,
        11724.14733196,  -5600.72969518,  -5040.68945549,  -7087.72212367,
        -2732.48091515,  -1114.16189205,  10884.34262014,  -6699.58922142,
         9896.13645366,  -7062.12930927,  -9316.64528853,  10733.81894745,
        -6600.83061088,  -8797.88480447,  -3026.68138378,   9885.2449325 ,
         9885.2449325 , -12606.92479504,  15522.44053674,  14837.16728606,
        10373.26487803,   9885.2449325 ,  -4741.53357442,   8907.93028718,
         9743.49056294,  -2813.01783912,  -5723.90843738,  -8051.30678908,
         9743.49056294,   9885.2449325 ,   9885.2449325 ,   8907.93028718,
         9743.49056294,  10733.81894745, -10791.35845749,   9896.13645366])

xu = np.array([10570.79861419,  9896.13645366,  9885.2449325 ,  3499.71828772,
       10733.81894745,  9896.13645366,  2588.0485208 ,  9885.2449325 ,
       10733.81894745,  7813.37645541,  8173.74888589,  9885.2449325 ,
        7650.80455012,  4700.68041427,  6579.24437498,  9885.2449325 ,
        9885.2449325 ,  7010.16834796,  7835.92588319,  1434.52872485,
        4858.87067318,  9743.49056294,  3446.57419696,  3610.28977232,
        9885.2449325 ,   134.73505811,  4840.76307288, 15685.46086999,
        6517.95457384,  8907.75334714,  9896.13645366,  6173.47746628,
        2464.29160268,  7421.9606632 ,  2609.8129398 ,   127.00351397,
       10873.45109898, 10873.45109898,  4079.84111214,  9553.61595455,
        8693.0498799 , 10873.45109898,  9221.45861346,   159.66010192,
       11905.22335013,  1098.96139907, 10884.34262014, 11724.14733196,
       11920.27268862, 12120.15005948, 13304.27850475,  4124.11804326,
        3261.73736772, 14294.08874288, 12818.19921577, 14506.6325907 ,
       13741.5528104 ,  3323.35759699,  3860.61404761, 13342.61639319,
        2307.91235987, 12255.24423573, 14594.99925762, 14885.89068719,
        6033.49372682, 12855.5013982 ,  8982.63630612,   241.3168837 ,
       10212.42188132, 16570.0971252 ,  9991.9310537 ,  7798.53193397,
        4560.46637967, 15602.88329514, 15546.92114432, 14666.16995038,
       14206.59566547, 13624.64457937,  6731.16607378,  4218.65949395,
       11748.13979577,  9565.40579926, 13299.06901306, 13737.38076521,
       12525.93104217, 12395.19575517,  6828.99870812,  8829.79032521,
       12584.2198504 ,  4154.88999761,   422.73165821, 14572.83035159,
        2821.03874657,  9195.61206983, 11373.26764487,  4154.17778069,
        3060.31535775,  7478.89657109,  7917.0687292 ,  9886.22477731,
       10733.81894745,  6428.98905835,  7278.69106239,  3059.7721634 ,
        9885.2449325 ,  8667.59970693,  9063.74238003, 10873.45109898,
        5456.92676246, 10884.34262014, 11724.14733196, 10884.34262014,
       10873.45109898, 11724.14733196,   620.64118423, 10873.45109898,
        5658.09095738,  9885.2449325 ,  9885.2449325 ,  4744.57499867,
        9896.13645366,  9885.2449325 ,  9885.2449325 ,  2287.9420104 ,
        8997.51726052, 13215.7431012 , 12783.10155066, 14398.1752982 ,
        4876.98011855,  8372.78078203,  9885.2449325 ,  4372.0737659 ,
        5755.70413856,  8907.93028718,  9743.49056294,  8907.93028718,
        2032.15073987,  6627.61554006,  1312.28985291,  1526.92594095,
        8778.76851472,   816.05648289, 10873.45109898,  6952.61651981])

[-0.5420297411278872, -0.7261844736231218, -0.8473779694400889, 0.3540345546944559, -0.7549708781526301, -0.9105014270260152, 0.26180924584791065, -0.9062371586969225, -0.8183564541470045, 0.87605477755952, 0.8388932932280762, -0.9684964394590725, 0.8588756651053981, 0.528342130217909, ...]

class MyProblem(Problem):

    def __init__(self):
        super().__init__(n_var=144,
                         n_obj=1,
                         n_constr=1,
                         xl=np.array([-2,-2]),
                         xu=np.array([2,2]))

    def _evaluate(self, X, out, *args, **kwargs):
        f1 = X[:,0]**2 + X[:,1]**2
        f2 = (X[:,0]-1)**2 + X[:,1]**2

        g1 = 2*(X[:, 0]-0.1) * (X[:, 0]-0.9) / 0.18
        g2 = - 20*(X[:, 0]-0.4) * (X[:, 0]-0.6) / 4.8

        out["F"] = np.column_stack([f1, f2])
        out["G"] = np.column_stack([g1, g2])

vectorized_problem = MyProblem()


algorithm = GA(pop_size=5)
res = minimize(vectorized_problem,
               algorithm,
               ('n_gen', 30),
               seed=1)

